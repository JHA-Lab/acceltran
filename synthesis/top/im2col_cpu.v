// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="im2col_cpu,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx690tffg1157-3,HLS_INPUT_CLOCK=1.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.754120,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=8,HLS_SYN_FF=12304,HLS_SYN_LUT=5503}" *)

module im2col_cpu (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        channels,
        height,
        width,
        kernel_h,
        kernel_w,
        pad_h,
        pad_w,
        stride_h,
        stride_w,
        dilation_h,
        dilation_w
);

parameter    ap_ST_fsm_state1 = 121'b1;
parameter    ap_ST_fsm_state2 = 121'b10;
parameter    ap_ST_fsm_state3 = 121'b100;
parameter    ap_ST_fsm_state4 = 121'b1000;
parameter    ap_ST_fsm_state5 = 121'b10000;
parameter    ap_ST_fsm_state6 = 121'b100000;
parameter    ap_ST_fsm_state7 = 121'b1000000;
parameter    ap_ST_fsm_state8 = 121'b10000000;
parameter    ap_ST_fsm_state9 = 121'b100000000;
parameter    ap_ST_fsm_state10 = 121'b1000000000;
parameter    ap_ST_fsm_state11 = 121'b10000000000;
parameter    ap_ST_fsm_state12 = 121'b100000000000;
parameter    ap_ST_fsm_state13 = 121'b1000000000000;
parameter    ap_ST_fsm_state14 = 121'b10000000000000;
parameter    ap_ST_fsm_state15 = 121'b100000000000000;
parameter    ap_ST_fsm_state16 = 121'b1000000000000000;
parameter    ap_ST_fsm_state17 = 121'b10000000000000000;
parameter    ap_ST_fsm_state18 = 121'b100000000000000000;
parameter    ap_ST_fsm_state19 = 121'b1000000000000000000;
parameter    ap_ST_fsm_state20 = 121'b10000000000000000000;
parameter    ap_ST_fsm_state21 = 121'b100000000000000000000;
parameter    ap_ST_fsm_state22 = 121'b1000000000000000000000;
parameter    ap_ST_fsm_state23 = 121'b10000000000000000000000;
parameter    ap_ST_fsm_state24 = 121'b100000000000000000000000;
parameter    ap_ST_fsm_state25 = 121'b1000000000000000000000000;
parameter    ap_ST_fsm_state26 = 121'b10000000000000000000000000;
parameter    ap_ST_fsm_state27 = 121'b100000000000000000000000000;
parameter    ap_ST_fsm_state28 = 121'b1000000000000000000000000000;
parameter    ap_ST_fsm_state29 = 121'b10000000000000000000000000000;
parameter    ap_ST_fsm_state30 = 121'b100000000000000000000000000000;
parameter    ap_ST_fsm_state31 = 121'b1000000000000000000000000000000;
parameter    ap_ST_fsm_state32 = 121'b10000000000000000000000000000000;
parameter    ap_ST_fsm_state33 = 121'b100000000000000000000000000000000;
parameter    ap_ST_fsm_state34 = 121'b1000000000000000000000000000000000;
parameter    ap_ST_fsm_state35 = 121'b10000000000000000000000000000000000;
parameter    ap_ST_fsm_state36 = 121'b100000000000000000000000000000000000;
parameter    ap_ST_fsm_state37 = 121'b1000000000000000000000000000000000000;
parameter    ap_ST_fsm_state38 = 121'b10000000000000000000000000000000000000;
parameter    ap_ST_fsm_state39 = 121'b100000000000000000000000000000000000000;
parameter    ap_ST_fsm_state40 = 121'b1000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state41 = 121'b10000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state42 = 121'b100000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state43 = 121'b1000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state44 = 121'b10000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state45 = 121'b100000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state46 = 121'b1000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state47 = 121'b10000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state48 = 121'b100000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state49 = 121'b1000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state50 = 121'b10000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state51 = 121'b100000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state52 = 121'b1000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state53 = 121'b10000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state54 = 121'b100000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state55 = 121'b1000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state56 = 121'b10000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state57 = 121'b100000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state58 = 121'b1000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state59 = 121'b10000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state60 = 121'b100000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state61 = 121'b1000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state62 = 121'b10000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state63 = 121'b100000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state64 = 121'b1000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state65 = 121'b10000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state66 = 121'b100000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state67 = 121'b1000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state68 = 121'b10000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state69 = 121'b100000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state70 = 121'b1000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state71 = 121'b10000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state72 = 121'b100000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state73 = 121'b1000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state74 = 121'b10000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state75 = 121'b100000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state76 = 121'b1000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state77 = 121'b10000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state78 = 121'b100000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state79 = 121'b1000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state80 = 121'b10000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state81 = 121'b100000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state82 = 121'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state83 = 121'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state84 = 121'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state85 = 121'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state86 = 121'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state87 = 121'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state88 = 121'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state89 = 121'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state90 = 121'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state91 = 121'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state92 = 121'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state93 = 121'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state94 = 121'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state95 = 121'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state96 = 121'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state97 = 121'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state98 = 121'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state99 = 121'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state100 = 121'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state101 = 121'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state102 = 121'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state103 = 121'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state104 = 121'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state105 = 121'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state106 = 121'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state107 = 121'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state108 = 121'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state109 = 121'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state110 = 121'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state111 = 121'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state112 = 121'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state113 = 121'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state114 = 121'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state115 = 121'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state116 = 121'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state117 = 121'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state118 = 121'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state119 = 121'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state120 = 121'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state121 = 121'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_16 = 32'b10110;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv32_3A = 32'b111010;
parameter    ap_const_lv32_42 = 32'b1000010;
parameter    ap_const_lv32_43 = 32'b1000011;
parameter    ap_const_lv32_4A = 32'b1001010;
parameter    ap_const_lv32_4B = 32'b1001011;
parameter    ap_const_lv32_52 = 32'b1010010;
parameter    ap_const_lv32_59 = 32'b1011001;
parameter    ap_const_lv32_5A = 32'b1011010;
parameter    ap_const_lv32_61 = 32'b1100001;
parameter    ap_const_lv32_62 = 32'b1100010;
parameter    ap_const_lv32_6A = 32'b1101010;
parameter    ap_const_lv32_71 = 32'b1110001;
parameter    ap_const_lv32_78 = 32'b1111000;
parameter    ap_const_lv31_0 = 31'b0000000000000000000000000000000;
parameter    ap_const_lv32_63 = 32'b1100011;
parameter    ap_const_lv32_FFFFFFFF = 32'b11111111111111111111111111111111;
parameter    ap_const_lv32_3B = 32'b111011;
parameter    ap_const_lv31_1 = 31'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] channels;
input  [31:0] height;
input  [31:0] width;
input  [31:0] kernel_h;
input  [31:0] kernel_w;
input  [31:0] pad_h;
input  [31:0] pad_w;
input  [31:0] stride_h;
input  [31:0] stride_w;
input  [31:0] dilation_h;
input  [31:0] dilation_w;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [120:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg   [3:0] data_col_address0;
reg    data_col_ce0;
reg    data_col_we0;
wire   [0:0] ap_CS_fsm_state2;
wire  signed [31:0] grp_fu_217_p2;
reg  signed [31:0] tmp_1_reg_440;
wire   [0:0] ap_CS_fsm_state8;
wire  signed [31:0] grp_fu_223_p2;
reg  signed [31:0] tmp_7_reg_445;
wire   [0:0] ap_CS_fsm_state9;
wire   [31:0] grp_fu_235_p2;
wire   [31:0] grp_fu_247_p2;
wire   [31:0] grp_fu_253_p2;
reg   [31:0] tmp_2_reg_482;
wire   [0:0] ap_CS_fsm_state15;
wire   [31:0] grp_fu_264_p2;
reg   [31:0] tmp_8_reg_487;
wire   [31:0] grp_fu_258_p2;
wire   [0:0] ap_CS_fsm_state16;
wire   [31:0] grp_fu_269_p2;
wire   [31:0] grp_fu_275_p2;
reg   [31:0] tmp_4_reg_502;
wire   [0:0] ap_CS_fsm_state23;
wire   [31:0] grp_fu_280_p2;
reg   [31:0] tmp_s_reg_507;
wire   [0:0] ap_CS_fsm_state24;
wire   [31:0] grp_fu_285_p2;
reg   [31:0] tmp_5_reg_523;
wire   [0:0] ap_CS_fsm_state59;
wire   [31:0] grp_fu_290_p2;
reg   [31:0] tmp_3_reg_528;
wire   [0:0] ap_CS_fsm_state67;
wire   [31:0] grp_fu_295_p2;
reg   [31:0] output_rows_2_reg_538;
wire   [31:0] grp_fu_300_p2;
reg   [31:0] output_col_3_reg_543;
wire   [0:0] tmp_9_fu_311_p2;
reg   [0:0] tmp_9_reg_549;
wire   [0:0] ap_CS_fsm_state68;
wire   [31:0] grp_fu_305_p2;
reg   [31:0] channel_1_reg_553;
wire   [0:0] ap_CS_fsm_state75;
wire   [0:0] tmp_10_fu_326_p2;
reg   [0:0] tmp_10_reg_558;
wire   [0:0] ap_CS_fsm_state76;
wire   [31:0] grp_fu_317_p2;
reg   [31:0] next_mul_reg_562;
wire   [0:0] ap_CS_fsm_state83;
wire   [30:0] grp_fu_331_p2;
reg   [30:0] kernel_row_1_reg_567;
wire   [31:0] grp_fu_337_p2;
reg   [31:0] input_row_reg_572;
wire   [0:0] ap_CS_fsm_state90;
wire   [0:0] tmp_11_fu_346_p2;
reg   [0:0] tmp_11_reg_577;
wire   [0:0] ap_CS_fsm_state91;
wire   [30:0] grp_fu_351_p2;
reg   [30:0] kernel_col_1_reg_581;
wire   [0:0] ap_CS_fsm_state98;
wire   [0:0] tmp_i_fu_363_p2;
reg   [0:0] tmp_i_reg_589;
wire   [0:0] ap_CS_fsm_state99;
wire   [0:0] tmp_12_fu_357_p2;
wire   [31:0] grp_fu_379_p2;
wire   [0:0] ap_CS_fsm_state107;
wire   [31:0] grp_fu_396_p2;
wire   [0:0] ap_CS_fsm_state114;
wire   [31:0] grp_fu_402_p2;
wire   [0:0] ap_CS_fsm_state121;
wire   [31:0] grp_fu_407_p2;
reg   [31:0] channel_reg_131;
reg   [30:0] kernel_row_reg_141;
reg   [31:0] phi_mul_reg_153;
reg   [30:0] kernel_col_reg_165;
reg   [31:0] a_assign_reg_177;
reg   [31:0] output_rows1_reg_187;
reg   [31:0] output_cols_reg_197;
reg   [31:0] output_col_reg_207;
wire  signed [63:0] tmp_16_fu_374_p1;
wire   [0:0] ap_CS_fsm_state100;
wire   [0:0] tmp_14_fu_368_p2;
wire  signed [63:0] tmp_15_fu_391_p1;
wire   [0:0] tmp_13_fu_385_p2;
wire   [31:0] grp_fu_235_p1;
wire   [31:0] grp_fu_247_p1;
wire   [0:0] ap_CS_fsm_state60;
wire   [31:0] kernel_row_cast_fu_322_p1;
wire   [31:0] kernel_col_cast_fu_342_p1;
reg   [120:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 121'b1;
end

im2col_cpu_data_col #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
data_col_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(data_col_address0),
    .ce0(data_col_ce0),
    .we0(data_col_we0),
    .d0(ap_const_lv32_0)
);

im2col_cpu_add_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
im2col_cpu_add_32bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_const_lv32_FFFFFFFF),
    .din1(kernel_h),
    .ce(1'b1),
    .dout(grp_fu_217_p2)
);

im2col_cpu_add_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
im2col_cpu_add_32bkb_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_const_lv32_FFFFFFFF),
    .din1(kernel_w),
    .ce(1'b1),
    .dout(grp_fu_223_p2)
);

im2col_cpu_add_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
im2col_cpu_add_32bkb_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_const_lv32_FFFFFFFF),
    .din1(grp_fu_235_p1),
    .ce(1'b1),
    .dout(grp_fu_235_p2)
);

im2col_cpu_add_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
im2col_cpu_add_32bkb_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_const_lv32_FFFFFFFF),
    .din1(grp_fu_247_p1),
    .ce(1'b1),
    .dout(grp_fu_247_p2)
);

im2col_cpu_mul_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
im2col_cpu_mul_32cud_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(dilation_h),
    .din1(tmp_1_reg_440),
    .ce(1'b1),
    .dout(grp_fu_253_p2)
);

im2col_cpu_add_32dEe #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
im2col_cpu_add_32dEe_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(height),
    .din1(grp_fu_235_p2),
    .ce(1'b1),
    .dout(grp_fu_258_p2)
);

im2col_cpu_mul_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
im2col_cpu_mul_32cud_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(dilation_w),
    .din1(tmp_7_reg_445),
    .ce(1'b1),
    .dout(grp_fu_264_p2)
);

im2col_cpu_add_32dEe #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
im2col_cpu_add_32dEe_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(width),
    .din1(grp_fu_247_p2),
    .ce(1'b1),
    .dout(grp_fu_269_p2)
);

im2col_cpu_sub_32eOg #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
im2col_cpu_sub_32eOg_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_258_p2),
    .din1(tmp_2_reg_482),
    .ce(1'b1),
    .dout(grp_fu_275_p2)
);

im2col_cpu_sub_32eOg #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
im2col_cpu_sub_32eOg_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_269_p2),
    .din1(tmp_8_reg_487),
    .ce(1'b1),
    .dout(grp_fu_280_p2)
);

im2col_cpu_sdiv_3fYi #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
im2col_cpu_sdiv_3fYi_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_4_reg_502),
    .din1(stride_h),
    .ce(1'b1),
    .dout(grp_fu_285_p2)
);

im2col_cpu_sdiv_3fYi #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
im2col_cpu_sdiv_3fYi_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_s_reg_507),
    .din1(stride_w),
    .ce(1'b1),
    .dout(grp_fu_290_p2)
);

im2col_cpu_add_32dEe #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
im2col_cpu_add_32dEe_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_const_lv32_1),
    .din1(tmp_5_reg_523),
    .ce(1'b1),
    .dout(grp_fu_295_p2)
);

im2col_cpu_add_32dEe #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
im2col_cpu_add_32dEe_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_const_lv32_1),
    .din1(tmp_3_reg_528),
    .ce(1'b1),
    .dout(grp_fu_300_p2)
);

im2col_cpu_add_32g8j #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
im2col_cpu_add_32g8j_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(channel_reg_131),
    .din1(ap_const_lv32_FFFFFFFF),
    .ce(1'b1),
    .dout(grp_fu_305_p2)
);

im2col_cpu_add_32g8j #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
im2col_cpu_add_32g8j_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(phi_mul_reg_153),
    .din1(dilation_h),
    .ce(1'b1),
    .dout(grp_fu_317_p2)
);

im2col_cpu_add_31hbi #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 31 ))
im2col_cpu_add_31hbi_U17(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(kernel_row_reg_141),
    .din1(ap_const_lv31_1),
    .ce(1'b1),
    .dout(grp_fu_331_p2)
);

im2col_cpu_sub_32eOg #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
im2col_cpu_sub_32eOg_U18(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(phi_mul_reg_153),
    .din1(pad_h),
    .ce(1'b1),
    .dout(grp_fu_337_p2)
);

im2col_cpu_add_31hbi #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 31 ))
im2col_cpu_add_31hbi_U19(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(kernel_col_reg_165),
    .din1(ap_const_lv31_1),
    .ce(1'b1),
    .dout(grp_fu_351_p2)
);

im2col_cpu_add_32g8j #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
im2col_cpu_add_32g8j_U20(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(output_cols_reg_197),
    .din1(ap_const_lv32_FFFFFFFF),
    .ce(1'b1),
    .dout(grp_fu_379_p2)
);

im2col_cpu_add_32g8j #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
im2col_cpu_add_32g8j_U21(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(output_col_reg_207),
    .din1(ap_const_lv32_FFFFFFFF),
    .ce(1'b1),
    .dout(grp_fu_396_p2)
);

im2col_cpu_add_32dEe #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
im2col_cpu_add_32dEe_U22(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(a_assign_reg_177),
    .din1(stride_h),
    .ce(1'b1),
    .dout(grp_fu_402_p2)
);

im2col_cpu_add_32g8j #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
im2col_cpu_add_32g8j_U23(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(output_rows1_reg_187),
    .din1(ap_const_lv32_FFFFFFFF),
    .ce(1'b1),
    .dout(grp_fu_407_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state98) & ~(tmp_11_reg_577 == 1'b0))) begin
        a_assign_reg_177 <= input_row_reg_572;
    end else if ((1'b1 == ap_CS_fsm_state121)) begin
        a_assign_reg_177 <= grp_fu_402_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state83) & (tmp_10_reg_558 == 1'b0))) begin
        channel_reg_131 <= channel_1_reg_553;
    end else if ((1'b1 == ap_CS_fsm_state67)) begin
        channel_reg_131 <= channels;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state99) & ~(tmp_12_fu_357_p2 == 1'b0))) begin
        kernel_col_reg_165 <= kernel_col_1_reg_581;
    end else if ((1'b1 == ap_CS_fsm_state90)) begin
        kernel_col_reg_165 <= ap_const_lv31_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state75) & (tmp_9_reg_549 == 1'b0))) begin
        kernel_row_reg_141 <= ap_const_lv31_0;
    end else if (((1'b1 == ap_CS_fsm_state98) & (tmp_11_reg_577 == 1'b0))) begin
        kernel_row_reg_141 <= kernel_row_1_reg_567;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state99) & (tmp_12_fu_357_p2 == 1'b0) & ~(tmp_i_fu_363_p2 == 1'b0))) begin
        output_col_reg_207 <= output_col_3_reg_543;
    end else if ((1'b1 == ap_CS_fsm_state114)) begin
        output_col_reg_207 <= grp_fu_396_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state99) & (tmp_12_fu_357_p2 == 1'b0) & (tmp_i_fu_363_p2 == 1'b0))) begin
        output_cols_reg_197 <= output_col_3_reg_543;
    end else if ((1'b1 == ap_CS_fsm_state107)) begin
        output_cols_reg_197 <= grp_fu_379_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state98) & ~(tmp_11_reg_577 == 1'b0))) begin
        output_rows1_reg_187 <= output_rows_2_reg_538;
    end else if ((1'b1 == ap_CS_fsm_state121)) begin
        output_rows1_reg_187 <= grp_fu_407_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state75) & (tmp_9_reg_549 == 1'b0))) begin
        phi_mul_reg_153 <= ap_const_lv32_0;
    end else if (((1'b1 == ap_CS_fsm_state98) & (tmp_11_reg_577 == 1'b0))) begin
        phi_mul_reg_153 <= next_mul_reg_562;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        channel_1_reg_553 <= grp_fu_305_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state90)) begin
        input_row_reg_572 <= grp_fu_337_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state98)) begin
        kernel_col_1_reg_581 <= grp_fu_351_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state83)) begin
        kernel_row_1_reg_567 <= grp_fu_331_p2;
        next_mul_reg_562 <= grp_fu_317_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        output_col_3_reg_543 <= grp_fu_300_p2;
        output_rows_2_reg_538 <= grp_fu_295_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        tmp_10_reg_558 <= tmp_10_fu_326_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state91)) begin
        tmp_11_reg_577 <= tmp_11_fu_346_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_1_reg_440 <= grp_fu_217_p2;
        tmp_7_reg_445 <= grp_fu_223_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        tmp_2_reg_482 <= grp_fu_253_p2;
        tmp_8_reg_487 <= grp_fu_264_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        tmp_3_reg_528 <= grp_fu_290_p2;
        tmp_5_reg_523 <= grp_fu_285_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        tmp_4_reg_502 <= grp_fu_275_p2;
        tmp_s_reg_507 <= grp_fu_280_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state68)) begin
        tmp_9_reg_549 <= tmp_9_fu_311_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state99) & (tmp_12_fu_357_p2 == 1'b0))) begin
        tmp_i_reg_589 <= tmp_i_fu_363_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state75) & ~(tmp_9_reg_549 == 1'b0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state75) & ~(tmp_9_reg_549 == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state100)) begin
        if ((~(tmp_i_reg_589 == 1'b0) & (1'b0 == tmp_13_fu_385_p2))) begin
            data_col_address0 = tmp_15_fu_391_p1;
        end else if (((tmp_i_reg_589 == 1'b0) & (1'b0 == tmp_14_fu_368_p2))) begin
            data_col_address0 = tmp_16_fu_374_p1;
        end else begin
            data_col_address0 = 'bx;
        end
    end else begin
        data_col_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state100) & (tmp_i_reg_589 == 1'b0) & (1'b0 == tmp_14_fu_368_p2)) | ((1'b1 == ap_CS_fsm_state100) & ~(tmp_i_reg_589 == 1'b0) & (1'b0 == tmp_13_fu_385_p2)))) begin
        data_col_ce0 = 1'b1;
    end else begin
        data_col_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state100) & (tmp_i_reg_589 == 1'b0) & (1'b0 == tmp_14_fu_368_p2)) | ((1'b1 == ap_CS_fsm_state100) & ~(tmp_i_reg_589 == 1'b0) & (1'b0 == tmp_13_fu_385_p2)))) begin
        data_col_we0 = 1'b1;
    end else begin
        data_col_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            if (~(tmp_9_reg_549 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            if ((tmp_10_reg_558 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state84;
            end
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            if ((tmp_11_reg_577 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state99;
            end
        end
        ap_ST_fsm_state99 : begin
            if (~(tmp_12_fu_357_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state91;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state100;
            end
        end
        ap_ST_fsm_state100 : begin
            if ((~(tmp_i_reg_589 == 1'b0) & (1'b0 == tmp_13_fu_385_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state108;
            end else if ((((tmp_i_reg_589 == 1'b0) & ~(1'b0 == tmp_14_fu_368_p2)) | (~(tmp_i_reg_589 == 1'b0) & ~(1'b0 == tmp_13_fu_385_p2)))) begin
                ap_NS_fsm = ap_ST_fsm_state115;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state101;
            end
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state100 = ap_CS_fsm[ap_const_lv32_63];

assign ap_CS_fsm_state107 = ap_CS_fsm[ap_const_lv32_6A];

assign ap_CS_fsm_state114 = ap_CS_fsm[ap_const_lv32_71];

assign ap_CS_fsm_state121 = ap_CS_fsm[ap_const_lv32_78];

assign ap_CS_fsm_state15 = ap_CS_fsm[ap_const_lv32_E];

assign ap_CS_fsm_state16 = ap_CS_fsm[ap_const_lv32_F];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state23 = ap_CS_fsm[ap_const_lv32_16];

assign ap_CS_fsm_state24 = ap_CS_fsm[ap_const_lv32_17];

assign ap_CS_fsm_state59 = ap_CS_fsm[ap_const_lv32_3A];

assign ap_CS_fsm_state60 = ap_CS_fsm[ap_const_lv32_3B];

assign ap_CS_fsm_state67 = ap_CS_fsm[ap_const_lv32_42];

assign ap_CS_fsm_state68 = ap_CS_fsm[ap_const_lv32_43];

assign ap_CS_fsm_state75 = ap_CS_fsm[ap_const_lv32_4A];

assign ap_CS_fsm_state76 = ap_CS_fsm[ap_const_lv32_4B];

assign ap_CS_fsm_state8 = ap_CS_fsm[ap_const_lv32_7];

assign ap_CS_fsm_state83 = ap_CS_fsm[ap_const_lv32_52];

assign ap_CS_fsm_state9 = ap_CS_fsm[ap_const_lv32_8];

assign ap_CS_fsm_state90 = ap_CS_fsm[ap_const_lv32_59];

assign ap_CS_fsm_state91 = ap_CS_fsm[ap_const_lv32_5A];

assign ap_CS_fsm_state98 = ap_CS_fsm[ap_const_lv32_61];

assign ap_CS_fsm_state99 = ap_CS_fsm[ap_const_lv32_62];

assign grp_fu_235_p1 = pad_h << ap_const_lv32_1;

assign grp_fu_247_p1 = pad_w << ap_const_lv32_1;

assign kernel_col_cast_fu_342_p1 = kernel_col_reg_165;

assign kernel_row_cast_fu_322_p1 = kernel_row_reg_141;

assign tmp_10_fu_326_p2 = (($signed(kernel_row_cast_fu_322_p1) < $signed(kernel_h)) ? 1'b1 : 1'b0);

assign tmp_11_fu_346_p2 = (($signed(kernel_col_cast_fu_342_p1) < $signed(kernel_w)) ? 1'b1 : 1'b0);

assign tmp_12_fu_357_p2 = ((output_rows1_reg_187 == ap_const_lv32_0) ? 1'b1 : 1'b0);

assign tmp_13_fu_385_p2 = ((output_col_reg_207 == ap_const_lv32_0) ? 1'b1 : 1'b0);

assign tmp_14_fu_368_p2 = ((output_cols_reg_197 == ap_const_lv32_0) ? 1'b1 : 1'b0);

assign tmp_15_fu_391_p1 = $signed(output_col_reg_207);

assign tmp_16_fu_374_p1 = $signed(output_cols_reg_197);

assign tmp_9_fu_311_p2 = ((channel_reg_131 == ap_const_lv32_0) ? 1'b1 : 1'b0);

assign tmp_i_fu_363_p2 = ((a_assign_reg_177 < height) ? 1'b1 : 1'b0);

endmodule //im2col_cpu
